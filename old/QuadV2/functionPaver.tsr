#include "Tensor.h"

int Tensor::getFunctionDef()
{
    maxOrder = 16;
    taylorIndex.clear();
    taylorIndex.push_back(7);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(97);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(111);
    taylorIndex.push_back(97);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(126);
    taylorIndex.push_back(111);
    taylorIndex.push_back(97);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(142);
    taylorIndex.push_back(126);
    taylorIndex.push_back(111);
    taylorIndex.push_back(97);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    taylorIndex.push_back(159);
    taylorIndex.push_back(142);
    taylorIndex.push_back(126);
    taylorIndex.push_back(111);
    taylorIndex.push_back(97);
    taylorIndex.push_back(84);
    taylorIndex.push_back(72);
    taylorIndex.push_back(61);
    taylorIndex.push_back(51);
    taylorIndex.push_back(42);
    taylorIndex.push_back(34);
    taylorIndex.push_back(27);
    taylorIndex.push_back(21);
    taylorIndex.push_back(16);
    taylorIndex.push_back(12);
    taylorIndex.push_back(9);
    taylorIndex.push_back(7);
    return 57;
}

void Tensor::computeTensor(INTERVAL x[], int n)
{
    t[0] = INTERVAL(0.0);
    t[1] = INTERVAL(1.0);
    t[2] = INTERVAL(2.0);
    t[3] = x[0];
    t[4] = x[1];
    t[5] = pow(t[3],2);
    t[6] = t[5] + t[4];
    t[7] = exp(t[6]);
    if (n==7) return;
    t[8] = t[3] * t[2];
    t[9] = t[8] * t[7];
    if (n==9) return;
    t[10] = t[7] * t[2];
    t[11] = t[9] * t[8];
    t[12] = t[11] + t[10];
    if (n==12) return;
    t[13] = t[12] * t[8];
    t[14] = t[9] * t[2];
    t[15] = t[14] + t[13];
    t[16] = t[15] + t[14];
    if (n==16) return;
    t[17] = t[12] * t[2];
    t[18] = t[16] * t[8];
    t[19] = t[18] + t[17];
    t[20] = t[19] + t[17];
    t[21] = t[20] + t[17];
    if (n==21) return;
    t[22] = t[21] * t[8];
    t[23] = t[16] * t[2];
    t[24] = t[23] + t[22];
    t[25] = t[24] + t[23];
    t[26] = t[25] + t[23];
    t[27] = t[26] + t[23];
    if (n==27) return;
    t[28] = t[21] * t[2];
    t[29] = t[27] * t[8];
    t[30] = t[29] + t[28];
    t[31] = t[30] + t[28];
    t[32] = t[31] + t[28];
    t[33] = t[32] + t[28];
    t[34] = t[33] + t[28];
    if (n==34) return;
    t[35] = t[34] * t[8];
    t[36] = t[27] * t[2];
    t[37] = t[36] + t[35];
    t[38] = t[37] + t[36];
    t[39] = t[38] + t[36];
    t[40] = t[39] + t[36];
    t[41] = t[40] + t[36];
    t[42] = t[41] + t[36];
    if (n==42) return;
    t[43] = t[34] * t[2];
    t[44] = t[42] * t[8];
    t[45] = t[44] + t[43];
    t[46] = t[45] + t[43];
    t[47] = t[46] + t[43];
    t[48] = t[47] + t[43];
    t[49] = t[48] + t[43];
    t[50] = t[49] + t[43];
    t[51] = t[50] + t[43];
    if (n==51) return;
    t[52] = t[51] * t[8];
    t[53] = t[42] * t[2];
    t[54] = t[53] + t[52];
    t[55] = t[54] + t[53];
    t[56] = t[55] + t[53];
    t[57] = t[56] + t[53];
    t[58] = t[57] + t[53];
    t[59] = t[58] + t[53];
    t[60] = t[59] + t[53];
    t[61] = t[60] + t[53];
    if (n==61) return;
    t[62] = t[51] * t[2];
    t[63] = t[61] * t[8];
    t[64] = t[63] + t[62];
    t[65] = t[64] + t[62];
    t[66] = t[65] + t[62];
    t[67] = t[66] + t[62];
    t[68] = t[67] + t[62];
    t[69] = t[68] + t[62];
    t[70] = t[69] + t[62];
    t[71] = t[70] + t[62];
    t[72] = t[71] + t[62];
    if (n==72) return;
    t[73] = t[72] * t[8];
    t[74] = t[61] * t[2];
    t[75] = t[74] + t[73];
    t[76] = t[75] + t[74];
    t[77] = t[76] + t[74];
    t[78] = t[77] + t[74];
    t[79] = t[78] + t[74];
    t[80] = t[79] + t[74];
    t[81] = t[80] + t[74];
    t[82] = t[81] + t[74];
    t[83] = t[82] + t[74];
    t[84] = t[83] + t[74];
    if (n==84) return;
    t[85] = t[72] * t[2];
    t[86] = t[84] * t[8];
    t[87] = t[86] + t[85];
    t[88] = t[87] + t[85];
    t[89] = t[88] + t[85];
    t[90] = t[89] + t[85];
    t[91] = t[90] + t[85];
    t[92] = t[91] + t[85];
    t[93] = t[92] + t[85];
    t[94] = t[93] + t[85];
    t[95] = t[94] + t[85];
    t[96] = t[95] + t[85];
    t[97] = t[96] + t[85];
    if (n==97) return;
    t[98] = t[97] * t[8];
    t[99] = t[84] * t[2];
    t[100] = t[99] + t[98];
    t[101] = t[100] + t[99];
    t[102] = t[101] + t[99];
    t[103] = t[102] + t[99];
    t[104] = t[103] + t[99];
    t[105] = t[104] + t[99];
    t[106] = t[105] + t[99];
    t[107] = t[106] + t[99];
    t[108] = t[107] + t[99];
    t[109] = t[108] + t[99];
    t[110] = t[109] + t[99];
    t[111] = t[110] + t[99];
    if (n==111) return;
    t[112] = t[97] * t[2];
    t[113] = t[111] * t[8];
    t[114] = t[113] + t[112];
    t[115] = t[114] + t[112];
    t[116] = t[115] + t[112];
    t[117] = t[116] + t[112];
    t[118] = t[117] + t[112];
    t[119] = t[118] + t[112];
    t[120] = t[119] + t[112];
    t[121] = t[120] + t[112];
    t[122] = t[121] + t[112];
    t[123] = t[122] + t[112];
    t[124] = t[123] + t[112];
    t[125] = t[124] + t[112];
    t[126] = t[125] + t[112];
    if (n==126) return;
    t[127] = t[126] * t[8];
    t[128] = t[111] * t[2];
    t[129] = t[128] + t[127];
    t[130] = t[129] + t[128];
    t[131] = t[130] + t[128];
    t[132] = t[131] + t[128];
    t[133] = t[132] + t[128];
    t[134] = t[133] + t[128];
    t[135] = t[134] + t[128];
    t[136] = t[135] + t[128];
    t[137] = t[136] + t[128];
    t[138] = t[137] + t[128];
    t[139] = t[138] + t[128];
    t[140] = t[139] + t[128];
    t[141] = t[140] + t[128];
    t[142] = t[141] + t[128];
    if (n==142) return;
    t[143] = t[126] * t[2];
    t[144] = t[142] * t[8];
    t[145] = t[144] + t[143];
    t[146] = t[145] + t[143];
    t[147] = t[146] + t[143];
    t[148] = t[147] + t[143];
    t[149] = t[148] + t[143];
    t[150] = t[149] + t[143];
    t[151] = t[150] + t[143];
    t[152] = t[151] + t[143];
    t[153] = t[152] + t[143];
    t[154] = t[153] + t[143];
    t[155] = t[154] + t[143];
    t[156] = t[155] + t[143];
    t[157] = t[156] + t[143];
    t[158] = t[157] + t[143];
    t[159] = t[158] + t[143];
    if (n==159) return;
    cout << "Error: cannot compute the required tensor!" << endl;
}
